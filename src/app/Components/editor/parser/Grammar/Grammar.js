/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,31],$V5=[1,30],$V6=[1,25],$V7=[1,28],$V8=[1,32],$V9=[1,33],$Va=[1,20],$Vb=[1,24],$Vc=[1,23],$Vd=[1,21],$Ve=[1,22],$Vf=[1,26],$Vg=[2,5,18,19,20,29,30,35,37,38,41,42,51,54,58,60,61,64,65,66],$Vh=[1,49],$Vi=[1,57],$Vj=[1,45],$Vk=[1,47],$Vl=[1,44],$Vm=[1,46],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,71],$Vt=[1,72],$Vu=[2,112],$Vv=[1,76],$Vw=[1,73],$Vx=[1,74],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[15,26,28,37,40,46,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$VO=[2,5,18,19,20,29,30,35,37,38,41,42,51,53,54,58,60,61,64,65,66],$VP=[1,110],$VQ=[1,112],$VR=[15,25,26,28,34,37,40,46,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,93],$VS=[1,122],$VT=[1,141],$VU=[26,28,46],$VV=[15,26,28,34,35,37],$VW=[1,162],$VX=[26,28],$VY=[15,26],$VZ=[15,26,28,37,40,46,68,69,74,75,76,77,78,79,80,81,82],$V_=[15,26,28,37,40,46,68,69,70,71,73,74,75,76,77,78,79,80,81,82],$V$=[15,26,28,37,40,46,74,75,76,77,78,79,80,81,82],$V01=[15,26,28,37,40,46,76,77,80,81,82],$V11=[15,26,28,34,35,37,45],$V21=[1,189],$V31=[15,25,26,28,34,37,40,45,46,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,93],$V41=[2,63],$V51=[1,210],$V61=[1,209],$V71=[1,226],$V81=[37,58,60],$V91=[1,234],$Va1=[28,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"DoWhileSt":9,"ForSt":10,"SwitchSt":11,"Statement":12,"PrintSt":13,"Declaration":14,";":15,"Assignation":16,"Operation":17,"BREAK":18,"CONTINUE":19,"RETURN":20,"Expr":21,"FunctionSt":22,"Call":23,"Access":24,"(":25,")":26,"ListaExpr":27,",":28,"FUNCTION":29,"ID":30,"Type":31,"Parametros":32,"Reserved":33,"=":34,"{":35,"StructAssign":36,"}":37,"TTYPE":38,"Struct":39,":":40,"LET":41,"CONST":42,"NativeType":43,"ArrayDimensions":44,"[":45,"]":46,"STYPE":47,"NTYPE":48,"BTYPE":49,"VTYPE":50,"IF":51,"ElseSt":52,"ELSE":53,"SWITCH":54,"Cases":55,"DefaultSt":56,"CaseSt":57,"CASE":58,"SwitchCode":59,"DEFAULT":60,"FOR":61,"IN":62,"OF":63,"WHILE":64,"DO":65,"PRINT":66,"ExprList":67,"+":68,"-":69,"*":70,"/":71,"^":72,"%":73,"<=":74,">=":75,"==":76,"!=":77,">":78,"<":79,"&&":80,"OR":81,"?":82,"Unary":83,"NULL":84,"!":85,"F":86,"DECIMAL":87,"NUMBER":88,"STRING":89,"TEMPLATE":90,"BOOL":91,"ArrayAccess":92,".":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",18:"BREAK",19:"CONTINUE",20:"RETURN",25:"(",26:")",28:",",29:"FUNCTION",30:"ID",34:"=",35:"{",37:"}",38:"TTYPE",40:":",41:"LET",42:"CONST",45:"[",46:"]",47:"STYPE",48:"NTYPE",49:"BTYPE",50:"VTYPE",51:"IF",53:"ELSE",54:"SWITCH",58:"CASE",60:"DEFAULT",61:"FOR",62:"IN",63:"OF",64:"WHILE",65:"DO",66:"PRINT",68:"+",69:"-",70:"*",71:"/",72:"^",73:"%",74:"<=",75:">=",76:"==",77:"!=",78:">",79:"<",80:"&&",81:"OR",82:"?",84:"NULL",85:"!",87:"DECIMAL",88:"NUMBER",89:"STRING",90:"TEMPLATE",91:"BOOL",93:"."},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,2],[6,1],[6,2],[6,2],[23,3],[23,4],[27,3],[27,1],[22,6],[22,7],[22,6],[22,5],[32,4],[32,2],[14,7],[14,5],[14,3],[14,4],[14,6],[39,4],[39,2],[16,3],[16,5],[36,5],[36,3],[33,1],[33,1],[31,2],[31,1],[44,3],[44,2],[43,2],[43,2],[43,2],[43,2],[43,2],[7,6],[52,2],[52,2],[52,0],[11,8],[11,7],[55,2],[55,1],[57,3],[56,2],[56,0],[59,2],[10,9],[10,9],[10,8],[10,8],[8,5],[9,7],[12,3],[12,2],[13,5],[67,3],[67,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,5],[21,1],[21,1],[21,2],[21,3],[17,3],[17,3],[83,2],[83,2],[83,1],[86,3],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[92,4],[92,3],[24,3],[24,4],[24,1],[24,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 59:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 24: case 60:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 18: case 54: case 55: case 91: case 99: case 106:

        this.$ = $$[$0];
    
break;
case 11: case 12: case 13: case 19: case 94:

        this.$ = $$[$0-1];
    
break;
case 14:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 16:

        this.$ = new Return($$[$0-1] ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 17:

        this.$ = new Return($$[$0-1] ,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 20:

        errores.push(new Error_( _$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico', yytext));
    
break;
case 21:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 22:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 23:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 25:

        this.$ = new Function($$[$0-4], $$[$0], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new Function($$[$0-5], $$[$0], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 27:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 28:

        this.$ = new Function($$[$0-3], $$[$0], [], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 29:

        $$[$0-3].push(new Param($$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column) );
        this.$ = $$[$0-3];
    
break;
case 30:

        this.$ = [ new Param($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column) ];
    
break;
case 31:

        this.$ = new Declaration($$[$0-6], $$[$0-4], $$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 32:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 33:

        this.$ = new Declaration($$[$0-2], $$[$0], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 34:

        this.$ = new Declaration($$[$0-3], null, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 35:

        this.$ = new TypeDeclaration($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 36:

        $$[$0-3].push({id:$$[$0-1],type:$$[$0]});
        this.$ = $$[$0-3];
    
break;
case 37:

        this.$ = [{id:$$[$0-1],type:$$[$0]}]
    
break;
case 38:

        this.$ = new Assignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 39:

        this.$ = new Assignation($$[$0-4], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 40:

        $$[$0-4].push({id:$$[$0-2],value:$$[$0]});
        this.$ = $$[$0-4];
    
break;
case 41:

        this.$ = [{id:$$[$0-2],value:$$[$0]}]
    
break;
case 42: case 43:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 5); 
break;
case 44:
 this.$ = new ArrayType($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 45:
 this.$ = $$[$0]; 
break;
case 46:
 $$[$0-2]++; this.$ = $$[$0-2]; 
break;
case 47:
 this.$ = 1 
break;
case 48:
 this.$ = new _Type($$[$0], 1, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = new _Type($$[$0], 0, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 50:
 this.$ = new _Type($$[$0], 2, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 51:
 this.$ = new _Type($$[$0], 3, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 52:
 this.$ = new _Type($$[$0], 5, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 53:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 56: case 63: case 92:

        this.$ = null;
    
break;
case 57:

        this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 58:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 61:

        this.$ = new Case($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 62:

        this.$ = new Case(null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 64:

        this.$ = new Statement($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 65: case 66:

        this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 67:

        this.$ = new ForIn($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 68:

        this.$ = new ForOf($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 69:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 70:

        this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 71:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 73:

        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 74:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 75:
 this.$ = [$$[$0]] 
break;
case 76:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 77:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 78:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 79:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 80:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POWER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 81:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 82:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 83:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 84:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 85:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 89:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 90:

        this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 93:

        this.$ = [];
    
break;
case 95:

            this.$ = new Operation($$[$0-2], OperationOption.INCREMENT, _$[$0-2].first_line,_$[$0-2].first_column);
        
break;
case 96:

            this.$ = new Operation($$[$0-2], OperationOption.DECREMENT, _$[$0-2].first_line,_$[$0-2].first_column);
        
break;
case 97:

        this.$ = new Unary($$[$0], UnaryOption.NEGATION, _$[$0-1].first_line, _$[$0-1].first_column,0);
    
break;
case 98:

        this.$ = new Unary($$[$0], UnaryOption.MINUS, _$[$0-1].first_line, _$[$0-1].first_column,0);
    
break;
case 100:
 
        this.$ = $$[$0-1];
    
break;
case 101: case 102:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 103:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 104:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 6);
    
break;
case 105:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 107:
 
        this.$ = $$[$0];
    
break;
case 108:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 109:
 this.$ = [$$[$0-1]] 
break;
case 110:

        this.$ = new Property($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 111:

        this.$ = new Property($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 112:

        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 113:

        this.$ = new Access([$$[$0-1],$$[$0]], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:29,29:$V4,30:$V5,33:27,35:$V6,38:$V7,41:$V8,42:$V9,51:$Va,54:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:29,29:$V4,30:$V5,33:27,35:$V6,38:$V7,41:$V8,42:$V9,51:$Va,54:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),{15:[1,36]},{15:[1,37]},{15:[1,38]},{15:[1,39]},{15:[1,40]},{15:[1,42],21:41,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($Vg,[2,18]),{15:[1,58]},{15:[1,59]},{25:[1,60]},{25:[1,61]},{12:62,35:$V6},{25:[1,63]},{25:[1,64]},{2:$V0,4:65,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:29,29:$V4,30:$V5,33:27,35:$V6,37:[1,66],38:$V7,41:$V8,42:$V9,51:$Va,54:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf},{25:[1,67]},{30:[1,68]},{30:[1,69]},{25:$Vs,34:[1,70],93:$Vt},o([25,34,93],$Vu,{92:75,45:$Vv,68:$Vw,69:$Vx}),{30:[1,77]},{30:[2,42]},{30:[2,43]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),{15:[1,78],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},o($Vg,[2,17]),o($VN,[2,91]),o($VN,[2,92]),{21:96,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,46:[1,94],67:95,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{23:55,24:56,25:$Vh,30:$Vi,69:$Vk,83:97,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{23:55,24:56,25:$Vh,30:$Vi,86:98,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VN,[2,99]),{21:99,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,104]),o($VN,[2,105]),o($VN,[2,106]),o($VN,[2,107],{25:$Vs,93:$Vt}),o([15,25,26,28,37,40,46,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,93],$Vu,{92:75,45:$Vv}),o($Vg,[2,19]),o($Vg,[2,20]),{21:100,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:101,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{64:[1,102]},{14:103,30:[1,104],33:105,38:$V7,41:$V8,42:$V9},{21:106,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:29,29:$V4,30:$V5,33:27,35:$V6,37:[1,107],38:$V7,41:$V8,42:$V9,51:$Va,54:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf},o($VO,[2,72]),{21:96,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,67:108,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{31:109,34:$VP,40:$VQ,43:111},{34:[1,113]},{21:114,23:55,24:56,25:$Vh,30:$Vi,35:[1,115],45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:118,23:55,24:56,25:$Vh,26:[1,116],27:117,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{30:[1,119]},{68:[1,120]},{69:[1,121]},o($VR,[2,113],{45:$VS}),{21:123,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{25:[1,124]},o($Vg,[2,16]),{21:125,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:126,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:127,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:128,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:129,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:130,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:131,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:132,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:133,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:134,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:135,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:136,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:137,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:138,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:139,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VN,[2,93]),{28:$VT,46:[1,140]},o($VU,[2,75],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM}),o($VN,[2,97]),o($VN,[2,98]),{26:[1,142],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{26:[1,143],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{26:[1,144],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{25:[1,145]},{15:[1,146]},{15:[1,147]},{30:[1,148]},{26:[1,149],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},o($VO,[2,71]),{26:[1,150],28:$VT},{15:[2,33],34:[1,151]},{21:152,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VV,[2,45],{44:153,45:[1,154]}),{30:[1,159],47:[1,155],48:[1,156],49:[1,157],50:[1,158]},{35:[1,160]},{15:[2,38],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{30:$VW,36:161},o($VN,[2,21]),{26:[1,163],28:[1,164]},o($VX,[2,24],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM}),o($VR,[2,110],{92:165,45:$Vv}),o($VY,[2,95]),o($VY,[2,96]),{21:166,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{46:[1,167],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{26:[1,168],30:[1,170],32:169},o($VZ,[2,76],{70:$VA,71:$VB,72:$VC,73:$VD}),o($VZ,[2,77],{70:$VA,71:$VB,72:$VC,73:$VD}),o($V_,[2,78],{72:$VC}),o($V_,[2,79],{72:$VC}),o($VN,[2,80]),o($V_,[2,81],{72:$VC}),o($V$,[2,82],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD}),o($V$,[2,83],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD}),o($V01,[2,84],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,78:$VI,79:$VJ}),o($V01,[2,85],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,78:$VI,79:$VJ}),o($V$,[2,86],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD}),o($V$,[2,87],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD}),o([15,26,28,37,40,46,80,81,82],[2,88],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ}),o([15,26,28,37,40,46,81,82],[2,89],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK}),{40:[1,171],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},o($VN,[2,94]),{21:172,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VN,[2,100]),{12:173,35:$V6},{12:174,35:$V6},{21:175,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:176,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{21:177,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{31:109,34:$VP,40:$VQ,43:111,62:[1,178],63:[1,179]},{35:[1,180]},{15:[1,181]},{21:183,23:55,24:56,25:$Vh,30:$Vi,35:[1,182],45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{15:[2,34],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},o($VV,[2,44],{45:[1,184]}),{46:[1,185]},o($V11,[2,48]),o($V11,[2,49]),o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),{30:[1,187],39:186},{28:$V21,37:[1,188]},{40:[1,190]},o($VN,[2,22]),{21:191,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VR,[2,111],{45:$VS}),{46:[1,192],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},o($V31,[2,109]),{12:194,31:193,35:$V6,40:$VQ,43:111},{26:[1,195],28:[1,196]},{31:197,40:$VQ,43:111},{21:198,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VU,[2,74],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM}),o($Vg,[2,56],{52:199,53:[1,200]}),o($Vg,[2,69]),{26:[1,201],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{15:[1,202],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{15:[1,203],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{30:[1,204]},{30:[1,205]},{37:$V41,55:206,56:207,57:208,58:$V51,60:$V61},o($Vg,[2,73]),{30:$VW,36:211},{15:[2,32],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{46:[1,212]},o($V11,[2,47]),{28:[1,214],37:[1,213]},{31:215,40:$VQ,43:111},{15:[2,39]},{30:[1,216]},{21:217,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VX,[2,23],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM}),o($V31,[2,108]),{12:218,35:$V6},o($Vg,[2,28]),{12:220,31:219,35:$V6,40:$VQ,43:111},{30:[1,221]},o($VX,[2,30]),o([15,26,28,37,40,46,82],[2,90],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL}),o($Vg,[2,53]),{7:223,12:222,35:$V6,51:$Va},{15:[1,224]},{17:225,30:$V71},{17:227,30:$V71},{26:[1,228]},{26:[1,229]},{37:$V41,56:230,57:231,58:$V51,60:$V61},{37:[1,232]},o($V81,[2,60]),{40:$V91,59:233},{21:235,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{28:$V21,37:[1,236]},o($V11,[2,46]),{15:[2,35]},{30:[1,237]},o($Va1,[2,37]),{40:[1,238]},o($Va1,[2,41],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM}),o($Vg,[2,25]),{12:239,35:$V6},o($Vg,[2,27]),{31:240,40:$VQ,43:111},o($Vg,[2,54]),o($Vg,[2,55]),o($Vg,[2,70]),{26:[1,241]},{68:$Vw,69:$Vx},{26:[1,242]},{12:243,35:$V6},{12:244,35:$V6},{37:[1,245]},o($V81,[2,59]),o($Vg,[2,58]),{37:[2,62]},{2:$V0,4:246,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:29,29:$V4,30:$V5,33:27,35:$V6,38:$V7,41:$V8,42:$V9,51:$Va,54:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf},{40:$V91,59:247,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{15:[2,31]},{31:248,40:$VQ,43:111},{21:249,23:55,24:56,25:$Vh,30:$Vi,45:$Vj,69:$Vk,83:43,84:$Vl,85:$Vm,86:48,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($Vg,[2,26]),o($VX,[2,29]),{12:250,35:$V6},{12:251,35:$V6},o($Vg,[2,67]),o($Vg,[2,68]),o($Vg,[2,57]),o($V81,[2,64],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,22:17,23:18,33:27,24:29,6:35,2:$V0,18:$V1,19:$V2,20:$V3,29:$V4,30:$V5,35:$V6,38:$V7,41:$V8,42:$V9,51:$Va,54:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf}),o($V81,[2,61]),o($Va1,[2,36]),o($Va1,[2,40],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM}),o($Vg,[2,65]),o($Vg,[2,66])],
defaultActions: {32:[2,42],33:[2,43],34:[2,1],188:[2,39],213:[2,35],233:[2,62],236:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Logic, LogicOption} = require('../Expression/Logic');
    const {Unary, UnaryOption} = require('../Expression/Unary');
    const {Access} = require('../Expression/Access');
    const {Property} = require('../Expression/Property');
    const {Literal} = require('../Expression/Literal');
    const {Ternary} = require('../Expression/Ternary');
    const {Param} = require('../Expression/Param');
    // Tipos de Objetos
    const {ArrayType} = require('../Types/Array');
    const {_Type} = require('../Types/Type');
    // Instrucciones
    const {Operation, OperationOption} = require('../Instruction/Operation');
    const {If} = require('../Instruction/If');
    const {Switch} = require('../Instruction/Switch');
    const {Case} = require('../Instruction/Case');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {For} = require('../Instruction/For');
    const {ForIn} = require('../Instruction/ForIn');
    const {ForOf} = require('../Instruction/ForOf');
    const {While} = require('../Instruction/While');
    const {DoWhile} = require('../Instruction/DoWhile');
    const {Declaration} = require('../Instruction/Declaration');
    const {TypeDeclaration} = require('../Instruction/TypeDeclaration');
    const {Assignation} = require('../Instruction/Assignation');
    const {Break} = require('../Instruction/Break');
    const {Continue} = require('../Instruction/Continue');
    const {Return} = require('../Instruction/Return');
    const {Call} = require('../Instruction/Call');
    const {Function} = require('../Instruction/Function');
    const {_Array} = require('../Object/Array');
    const { Error_ } = require('../Error');
    const { errores } = require('../Errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 87
break;
case 4:return 88
break;
case 5:return 89
break;
case 6:return 89
break;
case 7:return 90
break;
case 8:return 91
break;
case 9:return 91
break;
case 10:return 72
break;
case 11:return 70
break;
case 12:return 71
break;
case 13:return 40
break;
case 14:return 15
break;
case 15:return 28
break;
case 16:return 93
break;
case 17:return 69
break;
case 18:return 68
break;
case 19:return 73
break;
case 20:return 82
break;
case 21:return 74
break;
case 22:return 75
break;
case 23:return 79
break;
case 24:return 78
break;
case 25:return 76
break;
case 26:return 77
break;
case 27:return 81
break;
case 28:return 80
break;
case 29:return 85
break;
case 30:return 34
break;
case 31:return 84
break;
case 32:return 25
break;
case 33:return 26 
break;
case 34:return 35
break;
case 35:return 37
break;
case 36:return 45
break;
case 37:return 46
break;
case 38:return 62
break;
case 39:return 63
break;
case 40:return 51
break;
case 41:return 53
break;
case 42:return 54
break;
case 43:return 58
break;
case 44:return 60
break;
case 45:return 64
break;
case 46:return 65
break;
case 47:return 61
break;
case 48:return 66
break;
case 49:return 18
break;
case 50:return 20
break;
case 51:return 19
break;
case 52:return 29
break;
case 53:return 47
break;
case 54:return 48
break;
case 55:return 49
break;
case 56:return 50
break;
case 57:return 38
break;
case 58:return 41
break;
case 59:return 42
break;
case 60:return 30;
break;
case 61:return 5
break;
case 62:errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','Valor inesperado ' + yy_.yytext));  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:([`]([^`])*[`]))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\?)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:null\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:in\b)/,/^(?:of\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:console\.log\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}