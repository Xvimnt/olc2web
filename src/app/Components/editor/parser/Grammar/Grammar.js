/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,16],$V3=[1,29],$V4=[1,30],$V5=[1,24],$V6=[1,27],$V7=[1,31],$V8=[1,32],$V9=[1,19],$Va=[1,23],$Vb=[1,22],$Vc=[1,20],$Vd=[1,21],$Ve=[1,25],$Vf=[5,18,19,20,24,29,34,36,37,41,42,47,50,54,55,56,58,59,60],$Vg=[1,54],$Vh=[1,46],$Vi=[1,44],$Vj=[1,42],$Vk=[1,43],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,67],$Vr=[2,99],$Vs=[1,70],$Vt=[1,68],$Vu=[1,69],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[15,26,28,36,40,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VL=[5,18,19,20,24,29,34,36,37,41,42,47,49,50,54,55,56,58,59,60],$VM=[1,101],$VN=[1,145],$VO=[15,26],$VP=[26,28],$VQ=[15,26,28,36,40,61,62,67,68,69,70,71,72,73,74,75],$VR=[15,26,28,36,40,61,62,63,64,66,67,68,69,70,71,72,73,74,75],$VS=[15,26,28,36,40,67,68,69,70,71,72,73,74,75],$VT=[15,26,28,36,40,69,70,73,74,75],$VU=[15,26,28,33,34,36],$VV=[1,165],$VW=[2,59],$VX=[1,184],$VY=[1,183],$VZ=[1,199],$V_=[36,54,55],$V$=[28,36];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"DoWhileSt":9,"ForSt":10,"SwitchSt":11,"Statement":12,"PrintSt":13,"Declaration":14,";":15,"Assignation":16,"Operation":17,"BREAK":18,"CONTINUE":19,"RETURN":20,"Expr":21,"FunctionSt":22,"Call":23,"ID":24,"(":25,")":26,"ListaExpr":27,",":28,"FUNCTION":29,"Type":30,"Parametros":31,"Reserved":32,"=":33,"{":34,"StructAssign":35,"}":36,"TTYPE":37,"Struct":38,"Access":39,":":40,"LET":41,"CONST":42,"STYPE":43,"NTYPE":44,"BTYPE":45,"VTYPE":46,"IF":47,"ElseSt":48,"ELSE":49,"SWITCH":50,"Cases":51,"DefaultSt":52,"CaseSt":53,"CASE":54,"DEFAULT":55,"FOR":56,"IN":57,"WHILE":58,"DO":59,"PRINT":60,"+":61,"-":62,"*":63,"/":64,"^":65,"%":66,"<=":67,">=":68,"==":69,"!=":70,">":71,"<":72,"&&":73,"OR":74,"?":75,"Unary":76,"NULL":77,"!":78,"F":79,"DECIMAL":80,"NUMBER":81,"STRING":82,"TEMPLATE":83,"BOOL":84,".":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",18:"BREAK",19:"CONTINUE",20:"RETURN",24:"ID",25:"(",26:")",28:",",29:"FUNCTION",33:"=",34:"{",36:"}",37:"TTYPE",40:":",41:"LET",42:"CONST",43:"STYPE",44:"NTYPE",45:"BTYPE",46:"VTYPE",47:"IF",49:"ELSE",50:"SWITCH",54:"CASE",55:"DEFAULT",56:"FOR",57:"IN",58:"WHILE",59:"DO",60:"PRINT",61:"+",62:"-",63:"*",64:"/",65:"^",66:"%",67:"<=",68:">=",69:"==",70:"!=",71:">",72:"<",73:"&&",74:"OR",75:"?",77:"NULL",78:"!",80:"DECIMAL",81:"NUMBER",82:"STRING",83:"TEMPLATE",84:"BOOL",85:"."},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,1],[6,2],[23,3],[23,4],[27,3],[27,1],[22,6],[22,7],[22,6],[22,5],[31,4],[31,2],[14,7],[14,5],[14,3],[14,4],[14,6],[38,4],[38,2],[16,3],[16,5],[35,5],[35,3],[32,1],[32,1],[30,2],[30,2],[30,2],[30,2],[30,2],[7,6],[48,2],[48,2],[48,0],[11,8],[11,7],[51,2],[51,1],[53,4],[53,3],[52,3],[52,2],[52,0],[10,9],[10,9],[10,7],[8,5],[9,7],[12,3],[12,2],[13,5],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,5],[21,1],[21,1],[17,3],[17,3],[76,2],[76,2],[76,1],[79,3],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[39,3],[39,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 53:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 22: case 54:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 17: case 48: case 49: case 83: case 89: case 96:

        this.$ = $$[$0];
    
break;
case 11: case 12: case 13: case 18:

        this.$ = $$[$0-1];
    
break;
case 14:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 16:

        this.$ = new Return($$[$0-1] ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 19:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 20:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 21:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 23:

        this.$ = new Function($$[$0-4], $$[$0], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 24:

        this.$ = new Function($$[$0-5], $$[$0], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 25:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new Function($$[$0-3], $$[$0], [], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 27:

        $$[$0-3].push($$[$0-1]);
        this.$ = $$[$0-3];
    
break;
case 28:

        this.$ = [$$[$0-1]];
    
break;
case 29:

        this.$ = new Declaration($$[$0-6], $$[$0-4], $$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 30:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 31:

        this.$ = new Declaration($$[$0-2], $$[$0], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 32:

        this.$ = new Declaration($$[$0-3], null, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 33:

        this.$ = new Declaration(null, $$[$0-5], $$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 34:

        $$[$0-3].push({id:$$[$0-1],type:$$[$0]});
        this.$ = $$[$0-3];
    
break;
case 35:

        this.$ = [{id:$$[$0-1],type:$$[$0]}]
    
break;
case 36:

        this.$ = new Assignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 37:

        this.$ = new Assignation($$[$0-4], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 38:

        $$[$0-4].push({id:$$[$0-2],value:$$[$0]});
        this.$ = $$[$0-4];
    
break;
case 39:

        this.$ = [{id:$$[$0-2],value:$$[$0]}]
    
break;
case 40: case 41:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 5); 
break;
case 42:
 this.$ = new _Type($$[$0], 1, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 43:
 this.$ = new _Type($$[$0], 0, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$ = new _Type($$[$0], 2, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$ = new _Type($$[$0], 3, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 46:
 this.$ = new _Type($$[$0], 5, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 50: case 58: case 59: case 84:

        this.$ = null;
    
break;
case 51:

        this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 52:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 55:

        this.$ = {condicion: $$[$0-2], instruccion: $$[$0]};
    
break;
case 56:

        this.$ = {condicion: $$[$0-1], instruccion: null};
    
break;
case 57:

        this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 60: case 61:

        this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 62:

        this.$ = new Foreach($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 63:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 64:

        this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 65:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 66:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 67:

        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 68:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 70:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 71:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POWER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 75:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 76:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 77:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 78:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 79:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 80:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 81:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 82:

        this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 85:

            this.$ = new Operation($$[$0-2], OperationOption.INCREMENT, _$[$0-2].first_line,_$[$0-2].first_column);
        
break;
case 86:

            this.$ = new Operation($$[$0-2], OperationOption.DECREMENT, _$[$0-2].first_line,_$[$0-2].first_column);
        
break;
case 87:

        this.$ = new Unary($$[$0], UnaryOption.NEGATION, _$[$0-1].first_line, _$[$0-1].first_column,0);
    
break;
case 88:

        this.$ = new Unary($$[$0], UnaryOption.MINUS, _$[$0-1].first_line, _$[$0-1].first_column,0);
    
break;
case 90:
 
        this.$ = $$[$0-1];
    
break;
case 91: case 92:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 93:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 94:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 6);
    
break;
case 95:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 97:
 
        this.$ = $$[$0];
    
break;
case 98:

        this.$ = new Property($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,37:$V6,39:28,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve},{1:[3]},{5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,37:$V6,39:28,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{15:[1,35]},{15:[1,36]},{15:[1,37]},{15:[1,38]},{15:[1,39]},{21:40,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($Vf,[2,17]),{15:[1,55]},{25:[1,56]},{25:[1,57]},{12:58,34:$V5},{25:[1,59]},{25:[1,60]},{4:61,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,36:[1,62],37:$V6,39:28,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve},{25:[1,63]},{24:[1,64]},{24:[1,65]},{33:[1,66],85:$Vq},o([33,85],$Vr,{25:$Vs,61:$Vt,62:$Vu}),{24:[1,71]},{24:[2,40]},{24:[2,41]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{15:[1,72],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},o($VK,[2,83]),o($VK,[2,84]),{23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:88,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{23:52,24:$Vg,25:$Vh,39:53,79:89,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($VK,[2,89]),{21:90,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($VK,[2,91]),o($VK,[2,92]),o($VK,[2,93]),o($VK,[2,94]),o($VK,[2,95]),o($VK,[2,96]),o($VK,[2,97],{85:$Vq}),o([15,26,28,36,40,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85],$Vr,{25:$Vs}),o($Vf,[2,18]),{21:91,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:92,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{58:[1,93]},{14:94,24:[1,95],32:26,37:$V6,41:$V7,42:$V8},{21:96,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,36:[1,97],37:$V6,39:28,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve},o($VL,[2,66]),{21:98,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{30:99,33:[1,100],40:$VM},{33:[1,102]},{21:103,23:52,24:$Vg,25:$Vh,34:[1,104],39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{24:[1,105]},{61:[1,106]},{62:[1,107]},{21:110,23:52,24:$Vg,25:$Vh,26:[1,108],27:109,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{25:[1,111]},o($Vf,[2,16]),{21:112,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:113,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:114,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:115,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:116,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:117,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:118,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:119,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:120,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:121,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:122,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:123,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:124,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:125,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:126,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($VK,[2,87]),o($VK,[2,88]),{26:[1,127],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{26:[1,128],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{26:[1,129],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{25:[1,130]},{15:[1,131]},{15:[1,132],57:[1,133]},{26:[1,134],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},o($VL,[2,65]),{26:[1,135],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{15:[2,31],33:[1,136]},{21:137,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{24:[1,142],43:[1,138],44:[1,139],45:[1,140],46:[1,141]},{34:[1,143]},{15:[2,36],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{24:$VN,35:144},o([15,26,28,33,36,40,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85],[2,98]),o($VO,[2,85]),o($VO,[2,86]),o($VK,[2,19]),{26:[1,146],28:[1,147]},o($VP,[2,22],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ}),{24:[1,150],26:[1,148],31:149},o($VQ,[2,68],{63:$Vx,64:$Vy,65:$Vz,66:$VA}),o($VQ,[2,69],{63:$Vx,64:$Vy,65:$Vz,66:$VA}),o($VR,[2,70],{65:$Vz}),o($VR,[2,71],{65:$Vz}),o($VK,[2,72]),o($VR,[2,73],{65:$Vz}),o($VS,[2,74],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA}),o($VS,[2,75],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA}),o($VT,[2,76],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,71:$VF,72:$VG}),o($VT,[2,77],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,71:$VF,72:$VG}),o($VS,[2,78],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA}),o($VS,[2,79],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA}),o([15,26,28,36,40,73,74,75],[2,80],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG}),o([15,26,28,36,40,74,75],[2,81],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH}),{40:[1,151],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},o($VK,[2,90]),{12:152,34:$V5},{12:153,34:$V5},{21:154,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:155,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{21:156,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{24:[1,157]},{34:[1,158]},{15:[1,159]},{21:161,23:52,24:$Vg,25:$Vh,34:[1,160],39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{15:[2,32],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),{24:[1,163],38:162},{28:$VV,36:[1,164]},{40:[1,166]},o($VK,[2,20]),{21:167,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{12:169,30:168,34:$V5,40:$VM},{26:[1,170],28:[1,171]},{30:172,40:$VM},{21:173,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($Vf,[2,50],{48:174,49:[1,175]}),o($Vf,[2,63]),{26:[1,176],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{15:[1,177],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{15:[1,178],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{26:[1,179]},{36:$VW,51:180,52:181,53:182,54:$VX,55:$VY},o($Vf,[2,67]),{24:$VN,35:185},{15:[2,30],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{28:[1,187],36:[1,186]},{30:188,40:$VM},{15:[2,37]},{24:[1,189]},{21:190,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($VP,[2,21],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ}),{12:191,34:$V5},o($Vf,[2,26]),{12:193,30:192,34:$V5,40:$VM},{24:[1,194]},o($VP,[2,28]),o([15,26,28,36,40,75],[2,82],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vf,[2,47]),{7:196,12:195,34:$V5,47:$V9},{15:[1,197]},{17:198,24:$VZ},{17:200,24:$VZ},{12:201,34:$V5},{36:$VW,52:202,53:203,54:$VX,55:$VY},{36:[1,204]},o($V_,[2,54]),{40:[1,205]},{21:206,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},{28:$VV,36:[1,207]},{15:[2,33]},{24:[1,208]},o($V$,[2,35]),{40:[1,209]},o($V$,[2,39],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ}),o($Vf,[2,23]),{12:210,34:$V5},o($Vf,[2,25]),{30:211,40:$VM},o($Vf,[2,48]),o($Vf,[2,49]),o($Vf,[2,64]),{26:[1,212]},{61:$Vt,62:$Vu},{26:[1,213]},o($Vf,[2,62]),{36:[1,214]},o($V_,[2,53]),o($Vf,[2,52]),{4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,36:[2,58],37:$V6,39:28,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve},{40:[1,216],61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ},{15:[2,29]},{30:217,40:$VM},{21:218,23:52,24:$Vg,25:$Vh,39:53,62:$Vi,76:41,77:$Vj,78:$Vk,79:45,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp},o($Vf,[2,24]),o($VP,[2,27]),{12:219,34:$V5},{12:220,34:$V5},o($Vf,[2,51]),{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,36:[2,57],37:$V6,39:28,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve},o($V_,[2,56],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,22:17,23:18,32:26,39:28,4:221,18:$V0,19:$V1,20:$V2,24:$V3,29:$V4,34:$V5,37:$V6,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve}),o($V$,[2,34]),o($V$,[2,38],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ}),o($Vf,[2,60]),o($Vf,[2,61]),o($V_,[2,55],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,22:17,23:18,32:26,39:28,6:34,18:$V0,19:$V1,20:$V2,24:$V3,29:$V4,34:$V5,37:$V6,41:$V7,42:$V8,47:$V9,50:$Va,56:$Vb,58:$Vc,59:$Vd,60:$Ve})],
defaultActions: {31:[2,40],32:[2,41],33:[2,1],164:[2,37],186:[2,33],207:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Logic, LogicOption} = require('../Expression/Logic');
    const {Unary, UnaryOption} = require('../Expression/Unary');
    const {Access} = require('../Expression/Access');
    const {Property} = require('../Expression/Property');
    const {Literal} = require('../Expression/Literal');
    const {Ternary} = require('../Expression/Ternary');
    const {_Type} = require('../Expression/Type');
    const {Operation, OperationOption} = require('../Instruction/Operation');
    const {If} = require('../Instruction/If');
    const {Switch} = require('../Instruction/Switch');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {For} = require('../Instruction/For');
    const {Foreach} = require('../Instruction/Foreach');
    const {While} = require('../Instruction/While');
    const {DoWhile} = require('../Instruction/DoWhile');
    const {Declaration} = require('../Instruction/Declaration');
    const {Assignation} = require('../Instruction/Assignation');
    const {Break} = require('../Instruction/Break');
    const {Continue} = require('../Instruction/Continue');
    const {Return} = require('../Instruction/Return');
    const {Call} = require('../Instruction/Call');
    const {Function} = require('../Instruction/Function');
    const { Error_ } = require('../Error');
    const { errores } = require('../Errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 80
break;
case 4:return 81
break;
case 5:return 82
break;
case 6:return 82
break;
case 7:return 83
break;
case 8:return 84
break;
case 9:return 84
break;
case 10:return 65
break;
case 11:return 63
break;
case 12:return 64
break;
case 13:return 40
break;
case 14:return 15
break;
case 15:return 28
break;
case 16:return 85
break;
case 17:return 62
break;
case 18:return 61
break;
case 19:return 66
break;
case 20:return 75
break;
case 21:return 67
break;
case 22:return 68
break;
case 23:return 72
break;
case 24:return 71
break;
case 25:return 69
break;
case 26:return 70
break;
case 27:return 74
break;
case 28:return 73
break;
case 29:return 78
break;
case 30:return 33
break;
case 31:return 77
break;
case 32:return 25
break;
case 33:return 26 
break;
case 34:return 34
break;
case 35:return 36
break;
case 36:return 47
break;
case 37:return 49
break;
case 38:return 50
break;
case 39:return 54
break;
case 40:return 55
break;
case 41:return 58
break;
case 42:return 59
break;
case 43:return 56
break;
case 44:return 60
break;
case 45:return 18
break;
case 46:return 20
break;
case 47:return 19
break;
case 48:return 29
break;
case 49:return 43
break;
case 50:return 44
break;
case 51:return 45
break;
case 52:return 46
break;
case 53:return 37
break;
case 54:return 41
break;
case 55:return 42
break;
case 56:return 24;
break;
case 57:return 5
break;
case 58:errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','Valor inesperado ' + yy_.yytext));  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:([`]([^`])*[`]))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\?)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:null\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:console\.log\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}