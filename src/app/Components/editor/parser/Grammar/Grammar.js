/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,16],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,19],$V8=[1,23],$V9=[1,24],$Va=[1,22],$Vb=[1,20],$Vc=[1,21],$Vd=[1,25],$Ve=[5,18,19,20,24,29,34,35,42,45,46,49,51,52,53,55,56,57],$Vf=[1,50],$Vg=[1,43],$Vh=[1,41],$Vi=[1,40],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,64],$Vp=[1,62],$Vq=[1,63],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[15,26,28,36,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VG=[5,18,19,20,24,29,34,35,42,44,45,46,49,51,52,53,55,56,57],$VH=[1,94],$VI=[15,26],$VJ=[26,28],$VK=[15,26,28,36,58,59,64,65,66,67,68,69,70,71],$VL=[15,26,28,36,58,59,60,61,63,64,65,66,67,68,69,70,71],$VM=[15,26,28,36,64,65,66,67,68,69,70,71],$VN=[15,26,28,36,66,67,70,71],$VO=[15,26,28,33,46],$VP=[2,53],$VQ=[1,163],$VR=[1,162],$VS=[1,172],$VT=[49,51,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"DoWhileSt":9,"ForSt":10,"SwitchSt":11,"Statement":12,"PrintSt":13,"Declaration":14,";":15,"Assignation":16,"Operation":17,"BREAK":18,"CONTINUE":19,"RETURN":20,"Expr":21,"FunctionSt":22,"Call":23,"ID":24,"(":25,")":26,"ListaExpr":27,",":28,"FUNCTION":29,"Type":30,"Parametros":31,"Reserved":32,"=":33,"LET":34,"CONST":35,":":36,"STYPE":37,"NTYPE":38,"BTYPE":39,"VTYPE":40,"TTYPE":41,"IF":42,"ElseSt":43,"ELSE":44,"SWITCH":45,"{":46,"Cases":47,"DefaultSt":48,"}":49,"CaseSt":50,"CASE":51,"DEFAULT":52,"FOR":53,"IN":54,"WHILE":55,"DO":56,"PRINT":57,"+":58,"-":59,"*":60,"/":61,"^":62,"%":63,"<=":64,">=":65,"==":66,"!=":67,">":68,"<":69,"&&":70,"OR":71,"Unary":72,"!":73,"F":74,"DECIMAL":75,"NUMBER":76,"STRING":77,"TEMPLATE":78,"BOOL":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",18:"BREAK",19:"CONTINUE",20:"RETURN",24:"ID",25:"(",26:")",28:",",29:"FUNCTION",33:"=",34:"LET",35:"CONST",36:":",37:"STYPE",38:"NTYPE",39:"BTYPE",40:"VTYPE",41:"TTYPE",42:"IF",44:"ELSE",45:"SWITCH",46:"{",49:"}",51:"CASE",52:"DEFAULT",53:"FOR",54:"IN",55:"WHILE",56:"DO",57:"PRINT",58:"+",59:"-",60:"*",61:"/",62:"^",63:"%",64:"<=",65:">=",66:"==",67:"!=",68:">",69:"<",70:"&&",71:"OR",73:"!",75:"DECIMAL",76:"NUMBER",77:"STRING",78:"TEMPLATE",79:"BOOL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,1],[6,2],[23,3],[23,4],[27,3],[27,1],[22,6],[22,7],[22,6],[22,5],[31,4],[31,2],[14,5],[14,3],[14,4],[16,3],[32,1],[32,1],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[7,6],[43,2],[43,2],[43,0],[11,8],[11,7],[47,2],[47,1],[50,4],[50,3],[48,3],[48,2],[48,0],[10,9],[10,9],[10,7],[8,5],[9,7],[12,3],[12,2],[13,5],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[17,3],[17,3],[72,2],[72,2],[72,1],[74,3],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 47:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 22: case 48:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 17: case 42: case 43: case 76: case 81: case 88:

        this.$ = $$[$0];
    
break;
case 11: case 12: case 13: case 18:

        this.$ = $$[$0-1];
    
break;
case 14:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 16:

        this.$ = new Return($$[$0-1] ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 19:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 20:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 21:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 23:

        this.$ = new Function($$[$0-4], $$[$0], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 24:

        this.$ = new Function($$[$0-5], $$[$0], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 25:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new Function($$[$0-3], $$[$0], [], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 27:

        $$[$0-3].push($$[$0-1]);
        this.$ = $$[$0-3];
    
break;
case 28:

        this.$ = [$$[$0-1]];
    
break;
case 29:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 30:

        this.$ = new Declaration($$[$0-2], $$[$0], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 31:

        this.$ = new Declaration($$[$0-3], null, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 32:

        this.$ = new Assignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 33: case 34:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 5); 
break;
case 35:
 this.$ = new _Type($$[$0], 1, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 36:
 this.$ = new _Type($$[$0], 0, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 37:
 this.$ = new _Type($$[$0], 2, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 38:
 this.$ = new _Type($$[$0], 3, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 39:
 this.$ = new _Type($$[$0], 4, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 40:
 this.$ = new _Type($$[$0], 5, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 41:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 44: case 52: case 53:

        this.$ = null;
    
break;
case 45:

        this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 46:

        this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 49:

        this.$ = {condicion: $$[$0-2], instruccion: $$[$0]};
    
break;
case 50:

        this.$ = {condicion: $$[$0-1], instruccion: null};
    
break;
case 51:

        this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 54: case 55:

        this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 56:

        this.$ = new Foreach($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 57:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 58:

        this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 59:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 60:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 61:

        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 62:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 66:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POWER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 67:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 68:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 69:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 70:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 71:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 75:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 77:

            this.$ = new Operation($$[$0-2], OperationOption.INCREMENT, _$[$0-2].first_line,_$[$0-2].first_column);
        
break;
case 78:

            this.$ = new Operation($$[$0-2], OperationOption.DECREMENT, _$[$0-2].first_line,_$[$0-2].first_column);
        
break;
case 79:

        this.$ = new Unary($$[$0], UnaryOption.NEGATION, _$[$0-1].first_line, _$[$0-1].first_column,0);
    
break;
case 80:

        this.$ = new Unary($$[$0], UnaryOption.MINUS, _$[$0-1].first_line, _$[$0-1].first_column,0);
    
break;
case 82:
 
        this.$ = $$[$0-1];
    
break;
case 83: case 84:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 85:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 86:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 6);
    
break;
case 87:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 89:

        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd},{1:[3]},{5:[1,31],6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{15:[1,33]},{15:[1,34]},{15:[1,35]},{15:[1,36]},{15:[1,37]},{21:38,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},o($Ve,[2,17]),{15:[1,51]},{25:[1,52]},{25:[1,53]},{12:54,46:$V9},{25:[1,55]},{25:[1,56]},{4:57,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,49:[1,58],53:$Va,55:$Vb,56:$Vc,57:$Vd},{25:[1,59]},{24:[1,60]},{25:$Vo,33:[1,61],58:$Vp,59:$Vq},{24:[1,65]},{24:[2,33]},{24:[2,34]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),{15:[1,66],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VF,[2,76]),{23:49,24:$Vf,25:$Vg,59:$Vh,72:81,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{23:49,24:$Vf,25:$Vg,74:82,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},o($VF,[2,81]),{21:83,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},o($VF,[2,83]),o($VF,[2,84]),o($VF,[2,85]),o($VF,[2,86]),o($VF,[2,87]),o($VF,[2,88]),o($VF,[2,89],{25:$Vo}),o($Ve,[2,18]),{21:84,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:85,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{55:[1,86]},{14:87,24:[1,88],32:26,34:$V5,35:$V6},{21:89,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,49:[1,90],53:$Va,55:$Vb,56:$Vc,57:$Vd},o($VG,[2,60]),{21:91,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{30:92,33:[1,93],36:$VH},{21:95,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{58:[1,96]},{59:[1,97]},{21:100,23:49,24:$Vf,25:$Vg,26:[1,98],27:99,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{25:[1,101]},o($Ve,[2,16]),{21:102,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:103,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:104,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:105,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:106,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:107,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:108,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:109,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:110,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:111,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:112,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:113,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:114,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:115,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},o($VF,[2,79]),o($VF,[2,80]),{26:[1,116],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{26:[1,117],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{26:[1,118],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{25:[1,119]},{15:[1,120]},{15:[1,121],54:[1,122]},{26:[1,123],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VG,[2,59]),{26:[1,124],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{15:[2,30],33:[1,125]},{21:126,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{24:[1,132],37:[1,127],38:[1,128],39:[1,129],40:[1,130],41:[1,131]},{15:[2,32],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VI,[2,77]),o($VI,[2,78]),o($VF,[2,19]),{26:[1,133],28:[1,134]},o($VJ,[2,22],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE}),{24:[1,137],26:[1,135],31:136},o($VK,[2,62],{60:$Vt,61:$Vu,62:$Vv,63:$Vw}),o($VK,[2,63],{60:$Vt,61:$Vu,62:$Vv,63:$Vw}),o($VL,[2,64],{62:$Vv}),o($VL,[2,65],{62:$Vv}),o($VF,[2,66]),o($VL,[2,67],{62:$Vv}),o($VM,[2,68],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw}),o($VM,[2,69],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw}),o($VN,[2,70],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,68:$VB,69:$VC}),o($VN,[2,71],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,68:$VB,69:$VC}),o($VM,[2,72],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw}),o($VM,[2,73],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw}),o([15,26,28,36,70,71],[2,74],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o([15,26,28,36,71],[2,75],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($VF,[2,82]),{12:138,46:$V9},{12:139,46:$V9},{21:140,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:141,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{21:142,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{24:[1,143]},{46:[1,144]},{15:[1,145]},{21:146,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{15:[2,31],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VO,[2,35]),o($VO,[2,36]),o($VO,[2,37]),o($VO,[2,38]),o($VO,[2,39]),o($VO,[2,40]),o($VF,[2,20]),{21:147,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{12:149,30:148,36:$VH,46:$V9},{26:[1,150],28:[1,151]},{30:152,36:$VH},o($Ve,[2,44],{43:153,44:[1,154]}),o($Ve,[2,57]),{26:[1,155],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{15:[1,156],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{15:[1,157],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},{26:[1,158]},{47:159,48:160,49:$VP,50:161,51:$VQ,52:$VR},o($Ve,[2,61]),{15:[2,29],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($VJ,[2,21],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE}),{12:164,46:$V9},o($Ve,[2,26]),{12:166,30:165,36:$VH,46:$V9},{24:[1,167]},o($VJ,[2,28]),o($Ve,[2,41]),{7:169,12:168,42:$V7,46:$V9},{15:[1,170]},{17:171,24:$VS},{17:173,24:$VS},{12:174,46:$V9},{48:175,49:$VP,50:176,51:$VQ,52:$VR},{49:[1,177]},o($VT,[2,48]),{36:[1,178]},{21:179,23:49,24:$Vf,25:$Vg,59:$Vh,72:39,73:$Vi,74:42,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn},o($Ve,[2,23]),{12:180,46:$V9},o($Ve,[2,25]),{30:181,36:$VH},o($Ve,[2,42]),o($Ve,[2,43]),o($Ve,[2,58]),{26:[1,182]},{58:$Vp,59:$Vq},{26:[1,183]},o($Ve,[2,56]),{49:[1,184]},o($VT,[2,47]),o($Ve,[2,46]),{4:185,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,49:[2,52],53:$Va,55:$Vb,56:$Vc,57:$Vd},{36:[1,186],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE},o($Ve,[2,24]),o($VJ,[2,27]),{12:187,46:$V9},{12:188,46:$V9},o($Ve,[2,45]),{6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:17,23:18,24:$V3,29:$V4,32:26,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,49:[2,51],53:$Va,55:$Vb,56:$Vc,57:$Vd},o($VT,[2,50],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,22:17,23:18,32:26,4:189,18:$V0,19:$V1,20:$V2,24:$V3,29:$V4,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd}),o($Ve,[2,54]),o($Ve,[2,55]),o($VT,[2,49],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,22:17,23:18,32:26,6:32,18:$V0,19:$V1,20:$V2,24:$V3,29:$V4,34:$V5,35:$V6,42:$V7,45:$V8,46:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd})],
defaultActions: {29:[2,33],30:[2,34],31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Logic, LogicOption} = require('../Expression/Logic');
    const {Unary, UnaryOption} = require('../Expression/Unary');
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {_Type} = require('../Expression/Type');
    const {Operation, OperationOption} = require('../Instruction/Operation');
    const {If} = require('../Instruction/If');
    const {Switch} = require('../Instruction/Switch');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {For} = require('../Instruction/For');
    const {Foreach} = require('../Instruction/Foreach');
    const {While} = require('../Instruction/While');
    const {DoWhile} = require('../Instruction/DoWhile');
    const {Declaration} = require('../Instruction/Declaration');
    const {Assignation} = require('../Instruction/Assignation');
    const {Break} = require('../Instruction/Break');
    const {Continue} = require('../Instruction/Continue');
    const {Return} = require('../Instruction/Return');
    const {Call} = require('../Instruction/Call');
    const {Function} = require('../Instruction/Function');
    const { Error_ } = require('../Error');
    const { errores } = require('../Errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 75
break;
case 4:return 76
break;
case 5:return 77
break;
case 6:return 77
break;
case 7:return 78
break;
case 8:return 79
break;
case 9:return 79
break;
case 10:return 62
break;
case 11:return 60
break;
case 12:return 61
break;
case 13:return 36
break;
case 14:return 15
break;
case 15:return 28
break;
case 16:return 59
break;
case 17:return 58
break;
case 18:return 63
break;
case 19:return 64
break;
case 20:return 65
break;
case 21:return 69
break;
case 22:return 68
break;
case 23:return 66
break;
case 24:return 67
break;
case 25:return 71
break;
case 26:return 70
break;
case 27:return 73
break;
case 28:return 33
break;
case 29:return 25
break;
case 30:return 26 
break;
case 31:return 46
break;
case 32:return 49
break;
case 33:return 42
break;
case 34:return 44
break;
case 35:return 45
break;
case 36:return 51
break;
case 37:return 52
break;
case 38:return 55
break;
case 39:return 56
break;
case 40:return 53
break;
case 41:return 57
break;
case 42:return 18
break;
case 43:return 20
break;
case 44:return 19
break;
case 45:return 29
break;
case 46:return 37
break;
case 47:return 38
break;
case 48:return 39
break;
case 49:return 40
break;
case 50:return 41
break;
case 51:return 34
break;
case 52:return 35
break;
case 53:return 'PUSH'
break;
case 54:return 'POP'
break;
case 55:return 'LENGTH'
break;
case 56:return 24;
break;
case 57:return 5
break;
case 58:errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','Valor inesperado ' + yy_.yytext));  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:([`]([^`])*[`]))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:console\.log\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}